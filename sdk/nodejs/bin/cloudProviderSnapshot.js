"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas..CloudProviderSnapshot` provides a resource to take a cloud provider snapshot on demand.
 * On-demand snapshots happen immediately, unlike scheduled snapshots which occur at regular intervals. If there is already an on-demand snapshot with a status of queued or inProgress, you must wait until Atlas has completed the on-demand snapshot before taking another.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/cloud_provider_snapshot.html.markdown.
 */
class CloudProviderSnapshot extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["expiresAt"] = state ? state.expiresAt : undefined;
            inputs["masterKeyUuid"] = state ? state.masterKeyUuid : undefined;
            inputs["mongodVersion"] = state ? state.mongodVersion : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["retentionInDays"] = state ? state.retentionInDays : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
            inputs["snapshotType"] = state ? state.snapshotType : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["storageSizeBytes"] = state ? state.storageSizeBytes : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.clusterName === undefined) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (!args || args.description === undefined) {
                throw new Error("Missing required property 'description'");
            }
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            if (!args || args.retentionInDays === undefined) {
                throw new Error("Missing required property 'retentionInDays'");
            }
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["retentionInDays"] = args ? args.retentionInDays : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["expiresAt"] = undefined /*out*/;
            inputs["masterKeyUuid"] = undefined /*out*/;
            inputs["mongodVersion"] = undefined /*out*/;
            inputs["snapshotId"] = undefined /*out*/;
            inputs["snapshotType"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["storageSizeBytes"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CloudProviderSnapshot.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CloudProviderSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new CloudProviderSnapshot(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CloudProviderSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProviderSnapshot.__pulumiType;
    }
}
exports.CloudProviderSnapshot = CloudProviderSnapshot;
/** @internal */
CloudProviderSnapshot.__pulumiType = 'mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot';
//# sourceMappingURL=cloudProviderSnapshot.js.map