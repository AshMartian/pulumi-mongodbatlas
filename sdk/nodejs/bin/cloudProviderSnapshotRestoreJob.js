"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas..CloudProviderSnapshotRestoreJob` provides a resource to create a new restore job from a cloud provider snapshot of a specified cluster. The restore job can be one of two types:
 * * **automated:** Atlas automatically restores the snapshot with snapshotId to the Atlas cluster with name targetClusterName in the Atlas project with targetGroupId.
 *
 * * **download:** Atlas provides a URL to download a .tar.gz of the snapshot with snapshotId. The contents of the archive contain the data files for your Atlas cluster.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/cloud_provider_snapshot_restore_job.html.markdown.
 */
class CloudProviderSnapshotRestoreJob extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["cancelled"] = state ? state.cancelled : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["deliveryType"] = state ? state.deliveryType : undefined;
            inputs["deliveryUrls"] = state ? state.deliveryUrls : undefined;
            inputs["expired"] = state ? state.expired : undefined;
            inputs["expiresAt"] = state ? state.expiresAt : undefined;
            inputs["finishedAt"] = state ? state.finishedAt : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
            inputs["snapshotRestoreJobId"] = state ? state.snapshotRestoreJobId : undefined;
            inputs["timestamp"] = state ? state.timestamp : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.clusterName === undefined) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (!args || args.deliveryType === undefined) {
                throw new Error("Missing required property 'deliveryType'");
            }
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            if (!args || args.snapshotId === undefined) {
                throw new Error("Missing required property 'snapshotId'");
            }
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["deliveryType"] = args ? args.deliveryType : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["cancelled"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["deliveryUrls"] = undefined /*out*/;
            inputs["expired"] = undefined /*out*/;
            inputs["expiresAt"] = undefined /*out*/;
            inputs["finishedAt"] = undefined /*out*/;
            inputs["snapshotRestoreJobId"] = undefined /*out*/;
            inputs["timestamp"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CloudProviderSnapshotRestoreJob.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CloudProviderSnapshotRestoreJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new CloudProviderSnapshotRestoreJob(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CloudProviderSnapshotRestoreJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProviderSnapshotRestoreJob.__pulumiType;
    }
}
exports.CloudProviderSnapshotRestoreJob = CloudProviderSnapshotRestoreJob;
/** @internal */
CloudProviderSnapshotRestoreJob.__pulumiType = 'mongodbatlas:index/cloudProviderSnapshotRestoreJob:CloudProviderSnapshotRestoreJob';
//# sourceMappingURL=cloudProviderSnapshotRestoreJob.js.map