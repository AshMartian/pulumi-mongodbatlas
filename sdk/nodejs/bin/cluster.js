"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas..Cluster` provides a Cluster resource. The resource lets you create, edit and delete clusters. The resource requires your Project ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:**
 * <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
 * <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
 *
 * ## Example Usage
 *
 * ### Example AWS cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const clusterTest = new mongodbatlas.Cluster("cluster-test", {
 *     autoScalingDiskGbEnabled: true,
 *     backupEnabled: true,
 *     diskSizeGb: 100,
 *     mongoDbMajorVersion: "4.0",
 *     numShards: 1,
 *     projectId: "<YOUR-PROJECT-ID>",
 *     providerDiskIops: 300,
 *     providerEncryptEbsVolume: true,
 *     providerInstanceSizeName: "M40",
 *     //Provider Settings "block"
 *     providerName: "AWS",
 *     providerRegionName: "US_EAST_1",
 *     providerVolumeType: "STANDARD",
 *     replicationFactor: 3,
 * });
 * ```
 *
 * ### Example Azure cluster.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Cluster("test", {
 *     autoScalingDiskGbEnabled: true,
 *     backupEnabled: true,
 *     mongoDbMajorVersion: "4.0",
 *     numShards: 1,
 *     projectId: "<YOUR-PROJECT-ID>",
 *     providerDiskTypeName: "P6",
 *     providerInstanceSizeName: "M30",
 *     //Provider Settings "block"
 *     providerName: "AZURE",
 *     providerRegionName: "US_EAST_2",
 *     replicationFactor: 3,
 * });
 * ```
 *
 * ### Example GCP cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Cluster("test", {
 *     autoScalingDiskGbEnabled: true,
 *     backupEnabled: true,
 *     diskSizeGb: 40,
 *     mongoDbMajorVersion: "4.0",
 *     numShards: 1,
 *     projectId: "<YOUR-PROJECT-ID>",
 *     providerInstanceSizeName: "M30",
 *     //Provider Settings "block"
 *     providerName: "GCP",
 *     providerRegionName: "US_EAST_4",
 *     replicationFactor: 3,
 * });
 * ```
 *
 * ### Example Multi Region cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const clusterTest = new mongodbatlas.Cluster("cluster-test", {
 *     backupEnabled: true,
 *     clusterType: "REPLICASET",
 *     diskSizeGb: 100,
 *     numShards: 1,
 *     projectId: "<YOUR-PROJECT-ID>",
 *     providerDiskIops: 300,
 *     providerInstanceSizeName: "M10",
 *     //Provider Settings "block"
 *     providerName: "AWS",
 *     providerVolumeType: "STANDARD",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [
 *             {
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *                 regionName: "US_EAST_1",
 *             },
 *             {
 *                 electableNodes: 2,
 *                 priority: 6,
 *                 readOnlyNodes: 0,
 *                 regionName: "US_EAST_2",
 *             },
 *             {
 *                 electableNodes: 2,
 *                 priority: 5,
 *                 readOnlyNodes: 2,
 *                 regionName: "US_WEST_1",
 *             },
 *         ],
 *     }],
 * });
 * ```
 *
 * ### Example Global cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const clusterTest = new mongodbatlas.Cluster("cluster-test", {
 *     backupEnabled: false,
 *     clusterType: "GEOSHARDED",
 *     diskSizeGb: 80,
 *     numShards: 1,
 *     projectId: "<YOUR-PROJECT-ID>",
 *     providerBackupEnabled: true,
 *     providerDiskIops: 240,
 *     providerInstanceSizeName: "M30",
 *     //Provider Settings "block"
 *     providerName: "AWS",
 *     providerVolumeType: "STANDARD",
 *     replicationSpecs: [
 *         {
 *             numShards: 2,
 *             regionsConfigs: [{
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *                 regionName: "US_EAST_1",
 *             }],
 *             zoneName: "Zone 1",
 *         },
 *         {
 *             numShards: 2,
 *             regionsConfigs: [{
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *                 regionName: "EU_CENTRAL_1",
 *             }],
 *             zoneName: "Zone 2",
 *         },
 *     ],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/cluster.html.markdown.
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["advancedConfiguration"] = state ? state.advancedConfiguration : undefined;
            inputs["autoScalingDiskGbEnabled"] = state ? state.autoScalingDiskGbEnabled : undefined;
            inputs["backingProviderName"] = state ? state.backingProviderName : undefined;
            inputs["backupEnabled"] = state ? state.backupEnabled : undefined;
            inputs["biConnector"] = state ? state.biConnector : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["clusterType"] = state ? state.clusterType : undefined;
            inputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            inputs["encryptionAtRestProvider"] = state ? state.encryptionAtRestProvider : undefined;
            inputs["mongoDbMajorVersion"] = state ? state.mongoDbMajorVersion : undefined;
            inputs["mongoDbVersion"] = state ? state.mongoDbVersion : undefined;
            inputs["mongoUri"] = state ? state.mongoUri : undefined;
            inputs["mongoUriUpdated"] = state ? state.mongoUriUpdated : undefined;
            inputs["mongoUriWithOptions"] = state ? state.mongoUriWithOptions : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["numShards"] = state ? state.numShards : undefined;
            inputs["paused"] = state ? state.paused : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["providerBackupEnabled"] = state ? state.providerBackupEnabled : undefined;
            inputs["providerDiskIops"] = state ? state.providerDiskIops : undefined;
            inputs["providerDiskTypeName"] = state ? state.providerDiskTypeName : undefined;
            inputs["providerEncryptEbsVolume"] = state ? state.providerEncryptEbsVolume : undefined;
            inputs["providerInstanceSizeName"] = state ? state.providerInstanceSizeName : undefined;
            inputs["providerName"] = state ? state.providerName : undefined;
            inputs["providerRegionName"] = state ? state.providerRegionName : undefined;
            inputs["providerVolumeType"] = state ? state.providerVolumeType : undefined;
            inputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            inputs["replicationSpecs"] = state ? state.replicationSpecs : undefined;
            inputs["srvAddress"] = state ? state.srvAddress : undefined;
            inputs["stateName"] = state ? state.stateName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            if (!args || args.providerInstanceSizeName === undefined) {
                throw new Error("Missing required property 'providerInstanceSizeName'");
            }
            if (!args || args.providerName === undefined) {
                throw new Error("Missing required property 'providerName'");
            }
            inputs["advancedConfiguration"] = args ? args.advancedConfiguration : undefined;
            inputs["autoScalingDiskGbEnabled"] = args ? args.autoScalingDiskGbEnabled : undefined;
            inputs["backingProviderName"] = args ? args.backingProviderName : undefined;
            inputs["backupEnabled"] = args ? args.backupEnabled : undefined;
            inputs["biConnector"] = args ? args.biConnector : undefined;
            inputs["clusterType"] = args ? args.clusterType : undefined;
            inputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            inputs["encryptionAtRestProvider"] = args ? args.encryptionAtRestProvider : undefined;
            inputs["mongoDbMajorVersion"] = args ? args.mongoDbMajorVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["numShards"] = args ? args.numShards : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["providerBackupEnabled"] = args ? args.providerBackupEnabled : undefined;
            inputs["providerDiskIops"] = args ? args.providerDiskIops : undefined;
            inputs["providerDiskTypeName"] = args ? args.providerDiskTypeName : undefined;
            inputs["providerEncryptEbsVolume"] = args ? args.providerEncryptEbsVolume : undefined;
            inputs["providerInstanceSizeName"] = args ? args.providerInstanceSizeName : undefined;
            inputs["providerName"] = args ? args.providerName : undefined;
            inputs["providerRegionName"] = args ? args.providerRegionName : undefined;
            inputs["providerVolumeType"] = args ? args.providerVolumeType : undefined;
            inputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            inputs["replicationSpecs"] = args ? args.replicationSpecs : undefined;
            inputs["clusterId"] = undefined /*out*/;
            inputs["mongoDbVersion"] = undefined /*out*/;
            inputs["mongoUri"] = undefined /*out*/;
            inputs["mongoUriUpdated"] = undefined /*out*/;
            inputs["mongoUriWithOptions"] = undefined /*out*/;
            inputs["paused"] = undefined /*out*/;
            inputs["srvAddress"] = undefined /*out*/;
            inputs["stateName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'mongodbatlas:index/cluster:Cluster';
//# sourceMappingURL=cluster.js.map